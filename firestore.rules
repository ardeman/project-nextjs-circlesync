rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isOwner(owner) {
      return owner == request.auth.uid;
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    function isRegistered() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function canRead(readers) {
      return readers.hasAny([request.auth.uid])
    }

    function canWrite(writers) {
      return writers.hasAny([request.auth.uid])
    }

    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }

    match /groups/{groupId} {
      allow delete: if isOwner(resource.data.owner);
      allow create, read: if isRegistered();
      allow write: if canWrite(resource.data.permissions.write);
    }

    match /notes/{noteId} {
      allow delete: if isOwner(resource.data.owner);
      allow create: if isRegistered();
      allow read: if canRead(resource.data.permissions.read);
      allow write: if canWrite(resource.data.permissions.write);
    }

    match /to-dos/{todoId} {
      allow delete: if isOwner(resource.data.owner);
      allow create: if isRegistered();
      allow read: if canRead(resource.data.permissions.read);
      allow write: if canWrite(resource.data.permissions.write);
    }

    match /reminders/{reminderId} {
      allow delete: if isOwner(resource.data.owner);
      allow create: if isRegistered();
      allow read: if canRead(resource.data.permissions.read);
      allow write: if canWrite(resource.data.permissions.write);
    }

    match /money-logs/{moneyLogId} {
      allow delete: if isOwner(resource.data.owner);
      allow create: if isRegistered();
      allow read: if canRead(resource.data.permissions.read);
      allow write: if canWrite(resource.data.permissions.write);
    }
  }
}
